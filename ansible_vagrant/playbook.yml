---

- hosts: all
  become: true
  become_method: sudo

  vars:
    yum_packages:
    - nano
    - wget
    - htop
    - net-tools
    nodesource_nodejs_version: '10' # LTS for create-react-app dependency
    docker_users: vagrant

  roles:
  - andrelohmann.vagrant_centos_defaults # uncomment, if you chose centos/7 for vagrant image
  - andrelohmann.nodesource
  - andrelohmann.docker

  tasks:

  - name: check for package.json in application folder
    stat:
      path: /home/vagrant/application/package.json
    register: stat_result

  - name: initialize react app, if package.json does not exist on application folder
    block:

    - name: run create-react-app
      shell: npx create-react-app app
      args:
        chdir: /home/vagrant/
        executable: /bin/bash
      become: yes
      become_user: vagrant

    - name: mv app/node_modules to /home/vagrant/node_modules
      shell: mv /home/vagrant/app/node_modules /home/vagrant/node_modules
      args:
        executable: /bin/bash
      become: yes
      become_user: vagrant

    - name: mv app/* and app/.* to /home/vagrant/application
      shell: mv /home/vagrant/app/* /home/vagrant/app/.[^.]* /home/vagrant/application/
      args:
        executable: /bin/bash
      become: yes
      become_user: vagrant

    - name: Remove app folder
      file:
        path: /home/vagrant/app
        state: absent

    - name: create a symbolic link
      file:
        src: /home/vagrant/node_modules
        dest: /home/vagrant/application/node_modules
        owner: vagrant
        group: vagrant
        state: link

    when: stat_result.stat.exists == False

  - name: check for /home/vagrant/node_modules folder
    stat:
      path: /home/vagrant/node_modules
    register: stat_result

  - name: create symlink and install node_modules, if node_modules does not exist on application folder
    block:

    - name: make sure, /home/vargant/node_modules exists
      file:
        path: /home/vagrant/node_modules
        owner: vagrant
        group: vagrant
        mode: '0775'
        state: directory

    - name: create a symbolic link
      file:
        src: /home/vagrant/node_modules
        dest: /home/vagrant/application/node_modules
        owner: vagrant
        group: vagrant
        state: link

    - name: run npm install
      shell: npm install
      args:
        chdir: /home/vagrant/application/
        executable: /bin/bash
      become: yes
      become_user: vagrant

    when: stat_result.stat.exists == False

  # npm start generally autoreloads the browser, whenever a file is changed
  # however, this feature does not work by default, when a file is changed
  # outside the vagrant machine (e.g. within the shared folder on your host system)
  # to allow autoreload in vagrant as well, a ".env" file needs to be created with content
  # CHOKIDAR_USEPOLLING=true
  - name: check for .env in application folder
    stat:
      path:
    register: stat_result

  - name: create .env file to allow autoreload
    copy:
      dest: "/home/vagrant/application/.env"
      content: |
        CHOKIDAR_USEPOLLING=true
    when: stat_result.stat.exists == False

  # build the project
  - name: build the project
    shell: npm run build
    args:
      executable: /bin/bash
      chdir: /home/vagrant/application/
    become: yes
    become_user: vagrant

  # build and run the docker image
  - name: create docker image from build
    shell: docker build -t react-app .
    args:
      executable: /bin/bash
      chdir: /home/vagrant/application/
    #become: yes
    #become_user: vagrant

  - name: run the docker image as a daemon
    shell: docker run -d -p 80:80 react-app
    args:
      executable: /bin/bash
      chdir: /home/vagrant/application/
    #become: yes
    #become_user: vagrant

  # start react autoreload service and json-server in the background
  - name: add json-server systemd unit file
    copy:
      src: json-server.service
      dest: /etc/systemd/system/json-server.service
      mode: 0644

  - name: add react-app systemd unit file
    copy:
      src: react-app.service
      dest: /etc/systemd/system/react-app.service
      mode: 0644

  - name: reload systemd
    systemd:
      daemon_reload: yes

  - name: enable json-server
    systemd:
      name: json-server
      enabled: yes

  - name: start json-server
    systemd:
      name: json-server
      state: started

  - name: enable react-app
    systemd:
      name: react-app
      enabled: yes

  - name: start react-app
    systemd:
      name: react-app
      state: started
...
